#include<iostream>
#include<string>
using namespace std;

typedef struct LNode LNode;
typedef struct LNode* LinkList;

typedef struct LNode{
	int data;
	struct LNode* next;
};

bool InitList_R(LinkList &L) {//初始化一个单链表
	L = new LNode;//或者在c语言中 L = (LinkList)malloc(sizeof(LNode));
	if (!L) {
		return false;
	}
	L->next = NULL;
	return true; 
}

void DestroyList_T(LinkList& L) {//摧毁单链表,即将链表中所有的结点释放掉
	LinkList p;
	while (L) {
		p = L;
		L = L->next;
		delete p;//c语言中用free(p)	
	}
	cout << "释放链表结束" << endl;
}

void ClearList_C(LinkList& L) {//清空链表
	LinkList p,s;
	p = L->next;  
	while (p) {
		s = p;	
		p = p->next;
		delete s;
	}
	L->next = NULL;
	cout << "链表已被清空" << endl;
}

int JIsuanList(LinkList& L) {//求单链表的长度
	LinkList p;
	p = L->next;
	if (p == NULL) {
		return 0;
	}
	int j = 0;
	//while (p) {
	//	p = p->next;
	//	j++;
	//}
	while (p) {
		j++;
		p = p->next;
	}
	return j;
}

int GetList_G(LinkList L, int i, int e) {//在链表中找到第i个元素的值
	LinkList p;
	p = L;
	if (p == NULL || i < 1) {
		return 0;
	}
	while (p && i>0) {
		p = p->next;	
		i--;
	}
	e = p->data;
	return e;
}

LinkList GetLocat_E(LinkList L, int  i) {//找到链表中值为i的地址
	LinkList p;
	p = L->next;
	int j = 0;
	while (p && p->data != i) {
		p = p->next;
	}
	if (p) {
		return p;
	}
}

void InsertList(LinkList &L, int i , int e) {//链表的插入
	LinkList p,s;
	p = L;
	int j = 0;
	while (p && j < i - 1) {
		p = p->next;
		j++;
	}
	if (!p || j > i - 1) {
		cout << "插入异常" << endl;
		return;
	}
	s = new LNode;
	s->data = e;
	s->next = p->next;
	p->next = s;
	cout << "链表插入成功" << endl;
}

void DeleteLnode_D(LinkList& L, int i) {//链表中的删除
	LinkList p;
	p = L;
	int j = 0;
	if (p->next == NULL && j > i - 1) {
		cout << "删除位置错误，无法进行删除" << endl;
		return;
	}
	while (p->next && j < i - 1) {
		p = p->next;
		j++;
	}
	p->next = p->next->next;
	delete p->next;
	cout << "删除链表中的结点成功" << endl;
}

void CreateList_F(LinkList& L) {//利用头插法创建链表
	L = new LNode;
	L->next = NULL;//先创建一个有头结点的空链表即链表的初始化
	LinkList s;
	int n;
	cout << "请输入你想要建立的链表中元素的个数:";
	cin >> n;
	while (n--) {
		s = new LNode;
		cin >> s->data;
		s->next = L->next;
		L->next = s;
	}
	if (n == 0) {
		cout << "头插法创建链表成功" << endl;
	}
}

void CreateList_En(LinkList& L) {//利用尾插法创建链表
	L = new LNode;
	L->next = NULL;
	LinkList s, r;
	r = L;
	int n;
	cout << "请输入您想要建立的链表中的元素个数";
	cin >> n;
	while (n--) {
		s = new LNode;
		cin >> s->data;
		s->next = NULL;
		r->next = s;
		r = s;
	}
	if (n == 0) {
		cout << "利用尾插法创建链表成功" << endl;
	}
}

LinkList hebing(LinkList L1, LinkList L2) {//合并两个链表
	LinkList L3 = L1;
	LinkList p1 = L1->next;
	LinkList p2 = L2->next;
	LinkList r = L3;
	while (L1 != NULL && L2 != NULL) {
		if (p1->data <= p2->data) {
			r->next = p1;
			r = p1;
			p1 = p1->next;
		}
		else {
			r->next = p2;
			r = p2;
			p2 = p2->next;
		}
	}
	if(p1 != NULL) {
		r->next = p1;
	}
	else {
		r->next = p2;
	}
	delete L2;
	return L3;
}

int main() {

}