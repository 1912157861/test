//此方法可用于找数字在数组中左右边界的下标为多少
#include<iostream>
using namespace std;

const int N = 1000010;
int m , n;
int a[N];

int search_left(int l , int r , int x){//这里是二分查找中判断左部分的
    while(l < r){
        int mid = l + r >> 1;
        if(a[mid] >= x) r = mid;
        else l = mid + 1; 
    }
    return l;//这里返回的数值为数组的下标
}

int search_right(int l , int r , int x){//这里是二分查找中判断右部分的
    while(l < r){
        int mid = l + r + 1 >> 1;//>>即二级制向右移动 ， 即为除以二
        if(a[mid] <= x) l = mid;
        else r = mid -1 ;
    }
    return l;//这里返回的是数组的下标
}

int main(){
    scanf("%d%d" , &n , &m);//此时输入的n为要输入的数组中元素的个数 ， m为输入要判断的数字的次数
    for(int i = 0;i < n ;i ++){
        scanf("%d" , &a[i]);//进行数组的输入
    }
    while(m--){//循环输入要判断的数字
        int x;
        scanf("%d" , &x);//输入要判断的数字
        int c = search_left(0 , n - 1 , x);//此时进行左部分判断 
        if(a[c] != x) cout<<"-1 -1"<<endl;//如果判断的数字没有在输入的数组中则返回-1 -1
        else{
            cout<<c<<' ';//此时找到了要找的数字的左端点并进行输出
            int l = 0 , r = n - 1;
            int z = search_right(0 , n - 1 , x);//此时进行右部分判断
            cout<<z<<endl;//判读之后找到下标并输出
        }
    }
    return 0;
}
