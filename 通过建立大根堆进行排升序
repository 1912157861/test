#include <iostream>
#include <algorithm>

using namespace std;

void AdjustDown(int a[], int n, int parent)//此方法只能应用于根节点的左右子树都是小根堆的时候
{//此时这个代码的起始条件是有一个父亲结点，他的左子树和右子树都是一个小根堆
	int child = parent * 2 + 1;
	while (child < n)
	{
		if (child + 1 < n && a[child + 1] > a[child])//此时将小于号换为大于号就会变成大根堆
		{//此时右结点比左节点小所以就找到右节点,此时要判断一下这个树是否有右结点
			++child;
		}

		if (a[child] > a[parent])//将小于换成大于就会变为大根堆
		{
			swap(a[child], a[parent]);
			parent = child;
			child = parent * 2 + 1;
		}

		else
		{
			break;
		}
	}//此时如果找更小的就是创建小根堆
}

//当左右子树不是小根堆的时候就从该树中的倒数的非叶子结点向上调整

//堆排序 要弄升序可以创建小根堆但是建立小根堆的时候时间复杂度比较高，所以在弄升序的时候就创建大根堆
void HeapSort(int a[], int n)
{
	for (int i = (n - 1 - 1) / 2; i >= 0; i--)
	{//i = (n - 1 - 1) / 2的意思是找到最后一个结点(因为一共有n个结点所以最后一个节点在数组中的下标是n-1)的父节点(每个结点找到他们的父亲结点就是将他们的下标-1再除2)
		AdjustDown(a, n, i);//先创建一个大根堆
	}

	int end = n - 1;//让end指向大根堆中的最后一个元素

	while (end > 0)
	{
		swap(a[end], a[0]);//将大根堆中的第一个元素和最后一个元素进行交换
		--end;//此时将最后一个元素排除在堆外
		AdjustDown(a, end + 1, 0);
	}
	//此时就将堆中元素按照从小到大排好了顺序
}

int main()
{
	//int a[] = { 27, 15, 19, 18, 28, 34, 65, 49, 25, 37 };
	int a[] = { 1, 4, 3, 6, 7, 0, 9, 2, 11, 18 };
	int n = sizeof (a) / sizeof (a[0]);//表示数组中元素个数
	//AdjustDown(a, n, 0);

	//for (int i = 0; i < n; i++)
	//{
	//	cout << a[i] << ' ';
	//}

	for (int i = (n - 2) / 2; i >= 0; i--)
	{
		AdjustDown(a, n, i);
	}

	HeapSort(a, n);

	for (int i = 0; i < n; i++)
	{
		cout << a[i] << ' ';
	}

	cout << endl;
	return 0;

}
