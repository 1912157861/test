#include <iostream>
#include <cstring>
#include <queue>

using namespace std;

typedef pair<int , int> PII;//此处用来创建一个该类型的优先队列

const int N = 100010;

//稀疏图用邻接表存储
int h[N] , w[N] , e[N] , ne[N] , idx;
int dist[N];
bool st[N];//用来表示结点是否被更新过
int n , m;

void add(int a , int b , int c)
{
    e[idx] = b , ne[idx] = h[a] , w[idx] = c , h[a] = idx ++;
}//用邻接表存储图

int Dijkstra()
{
    memset(dist , 0x3f3f3f3f , sizeof dist);
    dist[1] = 0;//将dist[]进行初始化
    priority_queue<PII , vector<PII> , greater<PII>> heap;
    //创建一个小根堆
    
    heap.push({0 , 1});//heap前面存储的是该结点到根节点的距离,后面的点存储的是结点
    while (heap.size())
    {
        PII k = heap.top();//取不在集合S中距离最短的点
        heap.pop();
        int ver = k.second , distance = k.first;
        
        if (st[ver]) continue;
        st[ver] = true;
        
        for (int i = h[ver] ; i != -1 ; i = ne[i])
        {
            int j = e[i];
            if (dist[j] > distance + w[i])
            {
                dist[j] = distance + w[i];
                heap.push({dist[j] , j});
            }
        }
    }
    
    if (dist[n] == 0x3f3f3f3f) return -1;
    return dist[n];
}

int main()
{
    cin >> n >> m;
    
    memset(h , -1 , sizeof h);
    
    for (int i = 0 ; i < m ; i ++)
    {
        int a, b , c;
        cin >> a >> b >> c;
        add(a, b, c);
    }
    
    cout << Dijkstra() << endl;
    return 0;
    
}
